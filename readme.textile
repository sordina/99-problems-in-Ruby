<h1>Ruby functional programming</h1>

To set up run `bundle`.

To start solving the problems run `make`.

This is a modification of <a href="https://github.com/hcf/99-problems-in-Ruby">hcf/99-problems-in-Ruby</a>
with the solutions removed, and the solution stubs renamed after the problem number.


<h3>Original Readme</h3>

<p>Learning functional programming using Ruby by solving <a
href="https://prof.ti.bfh.ch/hew1/informatik3/prolog/p-99/">the Ninety-Nine
Prolog problems</a>.</p>


<p>As I read a blogpost written by <a href="http://gabrielsw.blogspot.com/2009/04/my-take-on-99-problems-in-scala-first.html">Gabriel</a>,
about solving the 22 of <a
href="https://prof.ti.bfh.ch/hew1/informatik3/prolog/p-99/">the Ninety-Nine
Prolog problems</a>, I thought this would be a good opportunity to improve my
functional programming skills in Ruby (I will probably also try to solve some
of these problems in either Erlang or Haskell to improve my knowledge of
these languages as well). Gabriel also links to the <a
href="http://aperiodic.net/phil/scala/s-99/">Scala solutions</a> if this is
more your cup of tea.</p>


<p>So far I have solved almost all of the <em>Working with Prolog lists</em>
problems, with the exception of problem 26 and problem 27. I just can&#8217;t
wrap my head around how to solve these, not even on paper, and the solution
given in Prolog doesn&#8217;t exactly help me. Solving these problems in Ruby
turned out to be quite simple for most of the problems, close to cheating
even for some, as all you need is built into Ruby. I have tried to use a
functional style of programming for the solutions, but for some, for example
problem 28, I didn&#8217;t manage.</p>


<p>For these first problems, I mainly use the <a
href="http://www.ruby-doc.org/core/classes/Enumerable.html#M003171">Enumarable::inject</a>,
which <em>combines the elements of enum by applying the block to an
accumulator value (memo) and each element in turn</em>. The hard part is
mostly defining the data structure to use, without it, it will be impossible
to even solve the problem in a functional fashion.</p>


<p>The following <a href="99_problems_ruby.zip">solutions can be downloaded
here</a>, with corresponding specs.</p>

